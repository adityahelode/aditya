import pandas as pd 
from sklearn.model_selection import train_test_split 
from sklearn import metrics 
from sklearn.preprocessing import LabelEncoder
from matplotlib import pyplot as plt 
import numpy as np
import csv

df = pd.read_csv("IoT_Devices.csv")
df.head()

df.info()

#Dropping Null Values
df = df.dropna()

objList = df.select_dtypes(include = "object").columns
print (objList)

#Label Encoding
L = LabelEncoder()
for feat in objList:
    df[feat] = L.fit_transform(df[feat].astype(str))
print (df.info())

X = df.drop(['label','Packet ID','TIME','IP.proto','IP.src','port.dst'],axis=1)
X.head()

Y=df['label']
Y.head()

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=100)

from sklearn.preprocessing import StandardScaler
scalar = StandardScaler()
X_train = scalar.fit_transform(X_train)
X_test = scalar.transform(X_test)

#Applying PCA
from sklearn.decomposition import PCA
  
pca = PCA(n_components = 5)
  
X_train = pca.fit_transform(X_train)
X_test = pca.transform(X_test)

#Applying Random Forest Model
from sklearn.ensemble import RandomForestClassifier
rf_model = RandomForestClassifier(n_estimators =5).fit(X_train, Y_train)
Y_pred = rf_model.predict(X_test)

from sklearn.metrics import confusion_matrix
Cmat = confusion_matrix(Y_test, Y_pred)
print(Cmat)

print("ACCURACY OF THE MODEL: ", metrics.accuracy_score(Y_test, Y_pred))

from sklearn.metrics import roc_curve, auc, classification_report
print(classification_report(Y_test, Y_pred)) #labels=np.unique(Y_pred)

import matplotlib.pyplot as plt
import numpy as np
from sklearn.datasets import load_digits
from sklearn.model_selection import validation_curve


parameter_range = np.arange(1, 10, 1)

train_score, test_score = validation_curve(RandomForestClassifier(n_estimators =5), X, Y,
									param_name = "n_estimators",
									param_range = parameter_range,
										cv = 5, scoring = "accuracy")

mean_train_score = np.mean(train_score, axis = 1)
std_train_score = np.std(train_score, axis = 1)

# Calculating mean and standard deviation of testing score
mean_test_score = np.mean(test_score, axis = 1)
std_test_score = np.std(test_score, axis = 1)

# Plot mean accuracy scores for training and testing scores
plt.plot(parameter_range, mean_train_score,
	label = "Training Score", color = 'b')
plt.plot(parameter_range, mean_test_score,
label = "Cross Validation Score", color = 'g')

# Creating the plot
plt.title("Validation Curve with Random Forest Classifier")
plt.xlabel("Estimators")
plt.ylabel("Accuracy")
plt.tight_layout()
plt.legend(loc = 'best')
plt.show()
